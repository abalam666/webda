{
  "version": 1,
  "parameters": {
    "TEST": "Global",
    "region": "us-east-1",
    "website": ["test.webda.io", "test2.webda.io"],
    "csrfOrigins": ["^accounts\\.google\\.\\w{2,}$", "www\\.facebook\\.com"],
    "locales": ["es-ES", "en", "fr-FR"]
  },
  "moddas": {
    "Test/Mailer": {
      "type": "local",
      "require": "../test/moddas/debugmailer"
    },
    "Test/VoidStore": {
      "type": "local",
      "require": "../test/moddas/voidstore"
    }
  },
  "models": {
    "WebdaTest/Task": "../test/models/task",
    "WebdaTest/Ident": "../test/models/ident"
  },
  "services": {
    "MemoryLogger": {
      "type": "Webda/MemoryLogger",
      "maxItems": 3,
      "logLevels": "TEST, TEST2",
      "logLevel": "TEST2"
    },
    "ConsoleLogger": {
      "type": "Webda/ConsoleLogger",
      "logLevel": "INFO"
    },
    "ConsoleTestLogger": {
      "type": "Webda/ConsoleLogger",
      "logLevels": "TEST",
      "logLevel": "TEST"
    },
    "ResourceService": {
      "type": "Webda/ResourceService",
      "folder": "test"
    },
    "ModelsResource": {
      "type": "Webda/ResourceService",
      "url": "templates"
    },
    "AsyncEvents": {
      "type": "AsyncEvents",
      "queues": {
        "default": "EventQueue",
        "priority": "PriorityEventQueue"
      }
    },
    "MemoryQueue": {
      "type": "MemoryQueue",
      "expire": 1
    },
    "PriorityEventQueue": {
      "type": "MemoryQueue",
      "expire": 3600
    },
    "EventQueue": {
      "type": "MemoryQueue",
      "expire": 3600
    },
    "Authentication": {
      "successRedirect": "https://webda.io/user.html",
      "failureRedirect": "/login-error",
      "providers": {
        "facebook": {},
        "email": {
          "from": "",
          "subject": "",
          "html": "",
          "text": "",
          "mailer": "DefinedMailer",
          "postValidation": false
        },
        "phone": {},
        "twitter": {},
        "google": {},
        "github": {}
      }
    },
    "DefinedMailer": {
      "type": "Test/Mailer"
    },
    "TrueMailer": {
      "type": "Webda/Mailer",
      "config": {
        "transport": "ses"
      }
    },
    "MemoryIdents": {
      "map": {
        "MemoryUsers": {
          "key": "_user",
          "target": "idents",
          "fields": "type,_lastUpdate",
          "cascade": true
        }
      },
      "index": ["type", "_lastUpdate"],
      "asyncDelete": true,
      "expose": {
        "url": "/memory/idents"
      },
      "model": "WebdaTest/Ident",
      "type": "MemoryStore"
    },
    "MemoryUsers": {
      "expose": {
        "url": "/users"
      },
      "type": "MemoryStore"
    },
    "Idents": {
      "map": {
        "Users": {
          "key": "_user",
          "target": "idents",
          "fields": "type,_lastUpdate",
          "cascade": true
        }
      },
      "index": ["type", "_lastUpdate"],
      "asyncDelete": true,
      "expose": {
        "restrict": {
          "create": true,
          "update": true,
          "get": true
        }
      },
      "model": "WebdaTest/Ident",
      "type": "FileStore",
      "folder": "./test/data/idents",
      "validator": "IdentValidator"
    },
    "Users": {
      "expose": {
        "url": "/users"
      },
      "type": "FileStore",
      "folder": "./test/data/users",
      "model": "Webda/User"
    },
    "Tasks": {
      "type": "FileStore",
      "folder": "./test/data/tasks",
      "model": "WebdaTest/Task",
      "expose": true
    },
    "binary": {
      "type": "FileBinary",
      "folder": "./test/data/binaries",
      "map": {
        "users": ["images"]
      },
      "expose": {
        "url": "/binary"
      }
    },
    "brokenService": {
      "type": "Test/VoidStore"
    }
  },
  "routes": {
    "/urltemplate/{id}": {
      "method": "GET",
      "executor": "debug",
      "params": {
        "TEST_ADD": "Users",
        "lambda": "plop"
      }
    },
    "/urltemplate/{id}/{other}": {
      "method": "GET",
      "executor": "debug",
      "params": {
        "TEST_ADD": "Users",
        "lambda": "plop"
      }
    },
    "/": {
      "method": ["GET", "POST"],
      "executor": "debug",
      "params": {
        "accessKeyId": "LOCAL_ACCESS_KEY",
        "secretAccessKey": "LOCAL_SECRET_KEY"
      }
    },
    "/route/string": {
      "method": ["GET"],
      "executor": "string",
      "result": "CodeCoverage"
    },
    "/route/string/json": {
      "method": ["GET"],
      "executor": "string",
      "result": {
        "title": "CodeCoverage"
      },
      "mime": "application/json"
    },
    "/route/resource": {
      "method": ["GET"],
      "executor": "resource",
      "file": "./test/Dockerfile.txt"
    },
    "/route/resource/notfound": {
      "method": ["GET"],
      "executor": "resource",
      "file": "./test/Dockerfile.notfound.txt"
    },
    "/route/resource/nomime": {
      "method": ["GET"],
      "executor": "resource",
      "file": "./test/Dockerfile"
    },
    "/route/file": {
      "method": ["GET"],
      "executor": "file",
      "file": "./test/data/routehelper.js"
    },
    "/route/inline": {
      "method": ["GET"],
      "executor": "inline",
      "callback": "function(ctx) { ctx.write('CodeCoverage'); }"
    },
    "/webda": {
      "method": ["GET", "POST", "DELETE", "PUT"],
      "executor": "lambda",
      "params": {
        "region": "us-west-2",
        "arn": "arn:aws:lambda:us-west-2:277712386420:function:webda-test"
      }
    }
  }
}
