{"version":3,"sources":["dir.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;oBACI,MAAM;;;;uBACH,SAAS;;;;qBACX,OAAO;;;;kBACV,IAAI;;;;QACZ,6BAA6B;;;;;;;IAK9B,GAAG;WAAH,GAAG;0BAAH,GAAG;;;eAAH,GAAG;;;;;;;;;WAOY,sBAAC,MAAM,EAAE,OAAO,EAAE;AACjC,UAAI,UAAU,GAAG,qBAAQ,IAAI,CAAC,MAAM,CAAC;;AACnC,YAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE;UAC7B,KAAK,GAAG,EAAE,CAAC;AACb,gBAAU,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;;AAEhC,YAAI,GAAG,kBAAK,KAAK,CAAC,IAAI,CAAC,CAAC;;AAExB,YAAI,GAAG,IAAI,CAAC,GAAG,CACZ,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,kBAAK,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;AAE9C,YAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjC,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,MAAM;iBAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;SAAA,CAAC,IAAI,kBAAK,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,KAAK,EAAE;AACvF,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;OACF,CAAC,CAAC;AACH,aAAO,KAAK,CAAC;KACd;;;;;;;;;;WAOc,sBAAG;AAChB,aAAO,mBAAM,IAAI,EAAE,IACjB,OAAO,CAAC,GAAG,CAAC,IAAI,IAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,IACpB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;KAC3B;;;;;;;;;WAMU,gBAAC,IAAI,EAAE;AAChB,UAAI;AACF,wBAAG,QAAQ,CAAC,kBAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAClC,eAAO,IAAI,CAAC;OACb,CAAC,OAAO,GAAG,EAAE;AACZ,eAAO,EAAE,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAA,AAAC,CAAC;OACxC;KACF;;;;;;;;;WAMW,iBAAC,IAAI,EAAE;AACnB,aAAO,gBAAG,WAAW,CAAC,IAAI,CAAC,CACxB,MAAM,CAAC,UAAA,IAAI;eAAI,gBAAG,QAAQ,CAAC,kBAAK,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE;OAAA,CAAC,CAAC;KACrE;;;SA1DG,GAAG;;;qBA4DM,GAAG","file":"dir.js","sourcesContent":["'use strict';\nimport Path from 'path';\nimport walkdir from 'walkdir';\nimport osenv from 'osenv';\nimport fs from 'fs';\nimport 'source-map-support/register';\n/**\n * The class that manages directories.\n * @class Dir  \n */\nclass Dir {\n  /**\n   * Create an array of all the right files in the source dir    \n   * @param  {String}   source source path    \n   * @param  {Object}   options option object    \n   * @return {Array}    \n   */\n  static collectFiles(source, options) {\n      var dirtyFiles = walkdir.sync(source), // tee hee!       \n        ignore = options.ignore || [],\n        files = [];\n      dirtyFiles.forEach(function(file) {\n        // Parse the file's path\n        file = Path.parse(file);\n        // Get the file name or subdirectories + file name\n        file = file.dir\n          .replace(source, '') + Path.sep + file.base;\n        // Remove the first path seperator\n        file = file.replace(file[0], '');\n        if (!ignore.some(folder => file.indexOf(folder) >= 0) && Path.parse(file).ext === '.js') {\n          files.push(file);\n        }\n      });\n      return files;\n    }\n    /**\n     * Locates the home directory for the    \n     * current operating system.\n     * Credits to @cliftonc\n     * @return {String} The home directory path    \n     */\n  static getHomeDir() {\n      return osenv.home() ||\n        process.env.HOME ||\n        process.env.HOMEPATH ||\n        process.env.USERPROFILE;\n    }\n    /**\n     * Determines if the directory exists      \n     * @param  {String} path The path to the directory     \n     * @return {Boolean}      The truth value      \n     */\n  static exists(path) {\n      try {\n        fs.statSync(Path.normalize(path));\n        return true;\n      } catch (err) {\n        return !(err && err.code === 'ENOENT');\n      }\n    }\n    /**\n     * Returns a list of directories from a given path\n     * @param {String} path The path to parse.\n     * @return {Array} The list of directories.\n     */\n  static getDirs(path) {\n    return fs.readdirSync(path)\n      .filter(file => fs.statSync(Path.join(path, file)).isDirectory());\n  }\n}\nexport default Dir;"],"sourceRoot":"/source/"}