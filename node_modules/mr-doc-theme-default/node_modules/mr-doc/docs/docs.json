[
  {
    "description": "Parse the CLI arguments.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "returns",
        "description": "A promise to the options.",
        "lineNumber": 3,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Promise"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "options"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 18,
        "column": 2
      },
      "end": {
        "line": 22,
        "column": 5
      }
    },
    "context": {
      "code": "static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }",
      "file": {
        "id": "r1Y9fMUG",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
        "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 23,
          "column": 2
        },
        "end": {
          "line": 29,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          23,
          29
        ]
      }
    }
  },
  {
    "description": "Setup the logger.",
    "tags": [
      {
        "title": "param",
        "description": "The parsed CLI arguments.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "options"
      },
      {
        "title": "returns",
        "description": "A promise to the options.",
        "lineNumber": 3,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Promise"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "options"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 30,
        "column": 2
      },
      "end": {
        "line": 34,
        "column": 5
      }
    },
    "context": {
      "code": "static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }",
      "file": {
        "id": "r1Y9fMUG",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
        "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 35,
          "column": 2
        },
        "end": {
          "line": 46,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          35,
          46
        ]
      }
    }
  },
  {
    "description": "Create the CLI.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "returns",
        "description": "An instance of Liftoff.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Liftoff"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 47,
        "column": 2
      },
      "end": {
        "line": 51,
        "column": 5
      }
    },
    "context": {
      "code": "static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }",
      "file": {
        "id": "r1Y9fMUG",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
        "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 52,
          "column": 2
        },
        "end": {
          "line": 59,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          52,
          59
        ]
      }
    }
  },
  {
    "description": "Launch the CLI.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": "The parsed CLI arguments.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "options"
      },
      {
        "title": "returns",
        "description": "A promise to the stream.",
        "lineNumber": 4,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Promise"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "Stream"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 60,
        "column": 2
      },
      "end": {
        "line": 65,
        "column": 5
      }
    },
    "context": {
      "code": "static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }",
      "file": {
        "id": "r1Y9fMUG",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
        "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 66,
          "column": 2
        },
        "end": {
          "line": 78,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          66,
          78
        ]
      }
    }
  },
  {
    "description": "Handle the result from the CLI.",
    "tags": [
      {
        "title": "private",
        "description": null,
        "lineNumber": 2,
        "type": null
      },
      {
        "title": "static",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "returns",
        "description": "A promise to the options.",
        "lineNumber": 4,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Promise"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "options"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 79,
        "column": 2
      },
      "end": {
        "line": 84,
        "column": 5
      }
    },
    "context": {
      "code": "static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }",
      "file": {
        "id": "r1Y9fMUG",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
        "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 85,
          "column": 2
        },
        "end": {
          "line": 105,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          85,
          105
        ]
      }
    }
  },
  {
    "description": "Set up the logger.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 12,
        "column": 2
      },
      "end": {
        "line": 15,
        "column": 5
      }
    },
    "context": {
      "code": "static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }",
      "file": {
        "id": "rJlF9fzIz",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
        "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 16,
          "column": 2
        },
        "end": {
          "line": 25,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          16,
          25
        ]
      }
    }
  },
  {
    "description": "Set the log levels.",
    "tags": [
      {
        "title": "private",
        "description": null,
        "lineNumber": 2,
        "type": null
      },
      {
        "title": "static",
        "description": null,
        "lineNumber": 3
      },
      {
        "title": "returns",
        "description": "The normalized levels.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 26,
        "column": 2
      },
      "end": {
        "line": 31,
        "column": 5
      }
    },
    "context": {
      "code": "static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }",
      "file": {
        "id": "rJlF9fzIz",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
        "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 32,
          "column": 2
        },
        "end": {
          "line": 35,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          32,
          35
        ]
      }
    }
  },
  {
    "description": "Set up the error logger.",
    "tags": [
      {
        "title": "private",
        "description": null,
        "lineNumber": 2,
        "type": null
      },
      {
        "title": "static",
        "description": null,
        "lineNumber": 3
      }
    ],
    "loc": {
      "start": {
        "line": 36,
        "column": 2
      },
      "end": {
        "line": 40,
        "column": 5
      }
    },
    "context": {
      "code": "static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }",
      "file": {
        "id": "rJlF9fzIz",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
        "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 41,
          "column": 2
        },
        "end": {
          "line": 50,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          41,
          50
        ]
      }
    }
  },
  {
    "description": "Set up the other loggers.",
    "tags": [
      {
        "title": "private",
        "description": null,
        "lineNumber": 2,
        "type": null
      },
      {
        "title": "static",
        "description": null,
        "lineNumber": 3
      }
    ],
    "loc": {
      "start": {
        "line": 51,
        "column": 2
      },
      "end": {
        "line": 55,
        "column": 5
      }
    },
    "context": {
      "code": "static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }",
      "file": {
        "id": "rJlF9fzIz",
        "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
        "base": "src\\",
        "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
        "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n",
        "ref": [
          {
            "r1Y9fMUG": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\cli\\index.js",
              "source": "\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nconst Source = require('mr-doc-utils').Source;\r\nconst Log = require('../utils/log');\r\nconst Liftoff = require('liftoff');\r\nconst Option = require('mr-doc-utils').Option;\r\nconst Promise = require('bluebird');\r\nconst Yargs = require('yargs');\r\nconst ViynlFS = require('vinyl-fs');\r\nconst _ = require('lodash');\r\nconst pkg = require('../../package.json');\r\nconst rc = require('rc');\r\nconst log = new Log();\r\n\r\nclass CLI {\r\n  /**\r\n   * Parse the CLI arguments.\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static parse() {\r\n    return Promise.resolve(Yargs\r\n    .usage('Usage: mrdoc [options]', Option.cli)\r\n    .help('help', Log.color.gray('Show help.'))\r\n    .alias('help', 'h')\r\n    .argv);\r\n  }\r\n  /**\r\n   * Setup the logger.\r\n   * @param  {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static log(options) {\r\n    return Promise.resolve((() => {\r\n      // Get log level.\r\n      const level = options.level || options.l || Option.defaults.log.level;\r\n      // Set up the logger.\r\n      Log.setup({\r\n        level: level !== 'silent' ? level : '',\r\n        silent: level === 'silent',\r\n      });\r\n      return options;\r\n    })());\r\n  }\r\n  /**\r\n   * Create the CLI.\r\n   * @static\r\n   * @return {Liftoff} - An instance of Liftoff.\r\n   */\r\n  static get rocket() {\r\n    // Create the CLI.\r\n    return new Liftoff({\r\n      name: 'mrdoc',\r\n      processTitle: 'mrdoc',\r\n      v8flags: require('v8flags'),\r\n    });\r\n  }\r\n  /**\r\n   * Launch the CLI.\r\n   * @static\r\n   * @param {Object} options - The parsed CLI arguments.\r\n   * @return {Promise<Stream>} - A promise to the stream.\r\n   */\r\n  static launch(options) {\r\n    // DEBUG: Launch\r\n    log.debug(Log.color.blue('Launching CLI'));\r\n    return new Promise((resolve, reject) => {\r\n      // Launch the CLI\r\n      CLI.rocket.launch({\r\n        cwd: options.cwd,\r\n        configPath: options.mrdocrc,\r\n      }, env => CLI.handler(env, options)\r\n      .then(stream => resolve(stream))\r\n      .catch(error => reject(error)));\r\n    });\r\n  }\r\n  /**\r\n   * Handle the result from the CLI.\r\n   * @private\r\n   * @static\r\n   * @return {Promise<options>} - A promise to the options.\r\n   */\r\n  static handler(env, options) {\r\n    const version = options.version || options.v;\r\n    const source = options.source || options.s;\r\n    if (version) {\r\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\r\n      process.exit();\r\n    }\r\n    if (_.isEmpty(source) && version === false) {\r\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\r\n      process.exit();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      // Normalize the source's path(s).\r\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\r\n      // DEBUG: Sources\r\n      log.debug(Log.color.blue('Sources:'), sources);\r\n      if (sources.indexOf(null) > -1) {\r\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\r\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CLI;\r\n"
            }
          },
          {
            "rJlF9fzIz": {
              "cwd": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc",
              "base": "src\\",
              "path": "c:\\Users\\iwata\\Documents\\GitHub\\mr-doc\\src\\utils\\log.js",
              "source": "/* eslint-env node */\r\n'use strict';\r\n\r\nconst Utils = require('mr-doc-utils');\r\nconst log = new Utils.Log();\r\nconst _ = require('lodash');\r\n\r\nclass Log {\r\n  constructor() {\r\n    return log;\r\n  }\r\n  /**\r\n   * Set up the logger.\r\n   * @static\r\n   */\r\n  static setup(options) {\r\n    if (options.silent) {\r\n      log.on('error', () => { /* NOOP */});\r\n    }\r\n    Log.levels(options.level)\r\n    .forEach(level => {\r\n      if (level === 'error') Log.error();\r\n      else Log.other(level);\r\n    });\r\n  }\r\n  /**\r\n   * Set the log levels.\r\n   * @private\r\n   * @static\r\n   * @return {String} - The normalized levels.\r\n   */\r\n  static levels(level) {\r\n    const levels = _.isString(level) ? level.split(',') : level;\r\n    return levels.map(i => i.replace(/\\s/g, ''));\r\n  }\r\n  /**\r\n   * Set up the error logger.\r\n   * @private\r\n   * @static\r\n   */\r\n  static error() {\r\n    log.on('error', function error() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor('error')]('[error]:'));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args.map(i => Log.color.red(i)));\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  /**\r\n   * Set up the other loggers.\r\n   * @private\r\n   * @static\r\n   */\r\n  static other(level) {\r\n    log.on(level, function logger() {\r\n      /* eslint-disable no-console */\r\n      const args = Array.prototype.slice.call(arguments);\r\n      args.unshift(Log.color[Log.levelColor(level)](`[${level}]:`));\r\n      args.unshift(Log.color.cyan('mrdoc'));\r\n      console.log.apply(console, args);\r\n      /* eslint-enable no-console */\r\n    });\r\n  }\r\n  static get color() {\r\n    return Utils.Log.color;\r\n  }\r\n  static levelColor(level) {\r\n    return ({\r\n      info: 'green',\r\n      debug: 'blue',\r\n      warn: 'yellow',\r\n      error: 'red',\r\n    })[level];\r\n  }\r\n}\r\n\r\nmodule.exports = Log;\r\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 56,
          "column": 2
        },
        "end": {
          "line": 65,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          56,
          65
        ]
      }
    }
  }
]